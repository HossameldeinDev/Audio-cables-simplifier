
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a3  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068b  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000237  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "UART.h"
int main(void)
{
    /* Replace with your application code */
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xff;
  70:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  72:	87 bb       	out	0x17, r24	; 23
	uint8 arr[4];
	UART_Init();
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <UART_Init>
    while (1) 
    {
		arr[0] = UART_ReceiveByte();
  78:	0e 94 5d 00 	call	0xba	; 0xba <UART_ReceiveByte>
  7c:	18 2f       	mov	r17, r24
		arr[1] = UART_ReceiveByte();
  7e:	0e 94 5d 00 	call	0xba	; 0xba <UART_ReceiveByte>
  82:	d8 2f       	mov	r29, r24
		arr[2] = UART_ReceiveByte();
  84:	0e 94 5d 00 	call	0xba	; 0xba <UART_ReceiveByte>
  88:	c8 2f       	mov	r28, r24
		arr[3] = UART_ReceiveByte();
  8a:	0e 94 5d 00 	call	0xba	; 0xba <UART_ReceiveByte>
		if (arr[3] == '#') 
  8e:	83 32       	cpi	r24, 0x23	; 35
  90:	21 f4       	brne	.+8      	; 0x9a <main+0x2e>
		{
			PORTC = 0;
  92:	15 ba       	out	0x15, r1	; 21
			PORTA = 0;
  94:	1b ba       	out	0x1b, r1	; 27
			PORTB = 0;
  96:	18 ba       	out	0x18, r1	; 24
  98:	ef cf       	rjmp	.-34     	; 0x78 <main+0xc>
		}
		else 
		{
		PORTC = ~(arr[0]);
  9a:	10 95       	com	r17
  9c:	15 bb       	out	0x15, r17	; 21
		PORTA = ~(arr[1]);
  9e:	d0 95       	com	r29
  a0:	db bb       	out	0x1b, r29	; 27
		PORTB = ~(arr[2]);
  a2:	c0 95       	com	r28
  a4:	c8 bb       	out	0x18, r28	; 24
  a6:	e8 cf       	rjmp	.-48     	; 0x78 <main+0xc>

000000a8 <UART_Init>:
}

void UART_SendByte(const uint8 data)
{
while(BIT_IS_CLEAR(UCSRA,UDRE)){}
UDR = data;
  a8:	59 9a       	sbi	0x0b, 1	; 11
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
  b2:	10 bc       	out	0x20, r1	; 32
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	89 b9       	out	0x09, r24	; 9
  b8:	08 95       	ret

000000ba <UART_ReceiveByte>:
}

uint8 UART_ReceiveByte(void)
{
while(BIT_IS_CLEAR(UCSRA,RXC)){}
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART_ReceiveByte>
return UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
}
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
