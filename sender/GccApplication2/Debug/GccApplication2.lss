
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ab  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "UART.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRC = 0;
  78:	14 ba       	out	0x14, r1	; 20
	DDRA = 0;
  7a:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0;
  7c:	17 ba       	out	0x17, r1	; 23
	uint8 arr[4];
	uint8 hash = '#';
	UART_Init();
  7e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
		arr[0] = PINC;
		arr[1] = PINB ;
		arr[2] = PINA & 0x03;
		arr[3] = PINA & 0x04;
		if(arr[3])
		arr[3] = hash;
  82:	13 e2       	ldi	r17, 0x23	; 35
	uint8 arr[4];
	uint8 hash = '#';
	UART_Init();
	while (1)
	{
		arr[0] = PINC;
  84:	83 b3       	in	r24, 0x13	; 19
  86:	89 83       	std	Y+1, r24	; 0x01
		arr[1] = PINB ;
  88:	86 b3       	in	r24, 0x16	; 22
  8a:	8a 83       	std	Y+2, r24	; 0x02
		arr[2] = PINA & 0x03;
  8c:	89 b3       	in	r24, 0x19	; 25
  8e:	83 70       	andi	r24, 0x03	; 3
  90:	8b 83       	std	Y+3, r24	; 0x03
		arr[3] = PINA & 0x04;
		if(arr[3])
  92:	ca 99       	sbic	0x19, 2	; 25
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x2e>
	while (1)
	{
		arr[0] = PINC;
		arr[1] = PINB ;
		arr[2] = PINA & 0x03;
		arr[3] = PINA & 0x04;
  96:	1c 82       	std	Y+4, r1	; 0x04
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x30>
		if(arr[3])
		arr[3] = hash;
  9a:	1c 83       	std	Y+4, r17	; 0x04
		UART_SendString(arr);
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_SendString>

		
	}
  a4:	ef cf       	rjmp	.-34     	; 0x84 <main+0x18>

000000a6 <UART_Init>:

uint8 UART_ReceiveByte(void)
{
while(BIT_IS_CLEAR(UCSRA,RXC)){}
return UDR;
}
  a6:	59 9a       	sbi	0x0b, 1	; 11
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
  b0:	10 bc       	out	0x20, r1	; 32
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	89 b9       	out	0x09, r24	; 9
  b6:	08 95       	ret

000000b8 <UART_SendByte>:
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <UART_SendByte>
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	08 95       	ret

000000c0 <UART_SendString>:

void UART_SendString(  uint8 *str)
{
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
  ca:	8c 01       	movw	r16, r24
  cc:	0c 5f       	subi	r16, 0xFC	; 252
  ce:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8 i = 0;
	for (i = 0 ; i<4 ; ++i)
	{
			UART_SendByte(str[i]);
  d0:	89 91       	ld	r24, Y+
  d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_SendByte>
}

void UART_SendString(  uint8 *str)
{
	uint8 i = 0;
	for (i = 0 ; i<4 ; ++i)
  d6:	c0 17       	cp	r28, r16
  d8:	d1 07       	cpc	r29, r17
  da:	d1 f7       	brne	.-12     	; 0xd0 <UART_SendString+0x10>
	{
			UART_SendByte(str[i]);
		}
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
